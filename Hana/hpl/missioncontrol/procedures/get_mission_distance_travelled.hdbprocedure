PROCEDURE "MISSIONCONTROL"."hpl.missioncontrol.procedures::get_mission_distance_travelled" (
	OUT ex_distance_travelled_tt MISSIONCONTROL."hpl.missioncontrol.data::MC.Procedures.tt_distance_travelled" 
	)   
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA MISSIONCONTROL
	READS SQL DATA AS
BEGIN
/***************************** 
	Write your procedure logic 
 *****************************/
 
 declare lvEarthRadius double default 6371000;
 declare lvToRad double default 0.01745329225199433;
 
 declare lvDistanceLatitude double default 0;
 declare lvDistanceLongitude double default 0;
 
 declare lvDistance double default 0;
 declare lvDistanceTotal double default 0;
 declare lvGpsLongitude decimal(9,6) default 0;
 declare lvGpsLatitude decimal(9,6) default 0;
 declare lvLatitude1 double default 0;
 declare lvLatitude2 double default 0;
 declare lva double default 0;
 declare lvc double default 0;

declare CURSOR c_mission FOR
    	SELECT MISSIONLOGID, GPSPOSLONGITUDE, GPSPOSLATITUDE 
    			from "hpl.missioncontrol.data::MC.Mission.MissionLog" 
    			where MESSAGEID = 'GPP' 
    			order by MISSIONLOGID;

 FOR cur_row as c_mission DO
  
  if lvGpsLongitude != 0 then
  	lvDistanceLatitude := ((lvGpsLatitude - cur_row.GPSPOSLATITUDE) * lvToRad) ;
  	lvDistanceLongitude := ((lvGpsLongitude - cur_row.GPSPOSLONGITUDE) * lvToRad) ;
  	
  	lvLatitude1 := lvGpsLatitude * lvToRad;
  	lvLatitude2 := cur_row.GPSPOSLATITUDE * lvToRad;
  	
  	lva := (sin(lvDistanceLatitude / 2) * (sin(lvDistanceLatitude / 2))) +
  		   (sin(lvDistanceLongitude / 2) * (sin(lvDistanceLongitude / 2))) *
  		   (cos(lvLatitude1) * cos(lvLatitude2));
  	
  	lvc := 2 * atan2(sqrt(lva), sqrt(1 - lva));
  	lvDistance := lvEarthRadius * lvc;
  	if lvDistance is not null then
  		lvDistanceTotal := lvDistanceTotal + lvDistance;  
  	end if;
  end if;
  lvGpsLongitude := cur_row.GPSPOSLONGITUDE;
  lvGpsLatitude := cur_row.GPSPOSLATITUDE;
    
 END FOR;
   
 ex_distance_travelled_tt = select lvDistanceTotal as DISTANCETRAVELLED from dummy;
 
END;